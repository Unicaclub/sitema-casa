version: '3.8'

services:
  # Aplicação PHP
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: erp-app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./storage/logs:/var/www/html/storage/logs
      - ./storage/uploads:/var/www/html/storage/uploads
    networks:
      - erp-network
    depends_on:
      - mysql
      - redis
    environment:
      - APP_ENV=production
      - APP_DEBUG=false

  # Servidor Web Nginx
  nginx:
    image: nginx:alpine
    container_name: erp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - erp-network

  # Banco de Dados MySQL
  mysql:
    image: mysql:8.0
    container_name: erp-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    ports:
      - "3306:3306"
    networks:
      - erp-network
    command: --default-authentication-plugin=mysql_native_password

  # Cache Redis
  redis:
    image: redis:alpine
    container_name: erp-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - erp-network

  # Queue Worker
  queue:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: erp-queue
    restart: unless-stopped
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    volumes:
      - ./:/var/www/html
    depends_on:
      - mysql
      - redis
    networks:
      - erp-network
    environment:
      - APP_ENV=production

  # Cron Jobs
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: erp-scheduler
    restart: unless-stopped
    command: /bin/sh -c "while true; do php artisan schedule:run; sleep 60; done"
    volumes:
      - ./:/var/www/html
    depends_on:
      - mysql
      - redis
    networks:
      - erp-network

  # WebSocket Server (opcional)
  websocket:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: erp-websocket
    restart: unless-stopped
    command: php artisan websocket:serve
    ports:
      - "6001:6001"
    volumes:
      - ./:/var/www/html
    depends_on:
      - redis
    networks:
      - erp-network

  # Elasticsearch (opcional para busca)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    container_name: erp-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - erp-network

  # Backup Service
  backup:
    image: alpine:latest
    container_name: erp-backup
    restart: unless-stopped
    command: /bin/sh -c "while true; do sleep 24h; done"
    volumes:
      - mysql_data:/backup/mysql
      - ./storage:/backup/files
      - ./docker/backup:/scripts
    depends_on:
      - mysql
    networks:
      - erp-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  erp-network:
    driver: bridge
