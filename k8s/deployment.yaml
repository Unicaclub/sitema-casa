# ðŸš€ Kubernetes Deployment Manifests - Supremo Architecture
#
# Production-ready Kubernetes deployment with:
# - Blue-Green deployment strategy
# - Horizontal Pod Autoscaling (HPA)
# - Pod Disruption Budget (PDB)
# - Resource limits and requests
# - Health checks and readiness probes
# - ConfigMaps and Secrets management
# - Service mesh integration
# - Monitoring and observability
# - Network policies for security

apiVersion: v1
kind: Namespace
metadata:
  name: erp-sistema
  labels:
    name: erp-sistema
    environment: production
    version: supremo
    
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: erp-app-config
  namespace: erp-sistema
data:
  APP_ENV: "production"
  APP_DEBUG: "false"
  DB_CONNECTION: "mysql"
  DB_HOST: "mysql-service"
  DB_PORT: "3306"
  DB_DATABASE: "erp_sistema"
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  QUEUE_CONNECTION: "redis"
  CACHE_DRIVER: "redis"
  SESSION_DRIVER: "redis"
  MAIL_MAILER: "smtp"
  LOG_CHANNEL: "stack"
  LOG_LEVEL: "info"

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: erp-app-secrets
  namespace: erp-sistema
type: Opaque
stringData:
  APP_KEY: "base64:your-app-key-here"
  DB_PASSWORD: "your-db-password"
  REDIS_PASSWORD: "your-redis-password"
  JWT_SECRET: "your-jwt-secret"
  MAIL_PASSWORD: "your-mail-password"

---
# Blue Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: erp-app-blue
  namespace: erp-sistema
  labels:
    app: erp-app
    version: blue
    tier: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: erp-app
      version: blue
  template:
    metadata:
      labels:
        app: erp-app
        version: blue
        tier: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: erp-app-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: erp-app
        image: ghcr.io/your-org/erp-sistema:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 9000
          name: php-fpm
          protocol: TCP
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: APP_NAME
          value: "ERP Sistema Supremo"
        - name: CONTAINER_ROLE
          value: "app"
        envFrom:
        - configMapRef:
            name: erp-app-config
        - secretRef:
            name: erp-app-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 80
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: storage-volume
          mountPath: /var/www/html/storage
        - name: config-volume
          mountPath: /var/www/html/config/cache
        - name: logs-volume
          mountPath: /var/log/app
      - name: nginx
        image: nginx:1.25-alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: nginx-ssl
          mountPath: /etc/nginx/ssl
        - name: storage-volume
          mountPath: /var/www/html/public/storage
          readOnly: true
      - name: queue-worker
        image: ghcr.io/your-org/erp-sistema:latest
        command: ["php", "artisan", "queue:work"]
        args: ["--verbose", "--tries=3", "--timeout=90", "--memory=256"]
        env:
        - name: CONTAINER_ROLE
          value: "queue"
        envFrom:
        - configMapRef:
            name: erp-app-config
        - secretRef:
            name: erp-app-secrets
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: storage-volume
          mountPath: /var/www/html/storage
      volumes:
      - name: storage-volume
        persistentVolumeClaim:
          claimName: erp-storage-pvc
      - name: config-volume
        emptyDir: {}
      - name: logs-volume
        hostPath:
          path: /var/log/erp-app
          type: DirectoryOrCreate
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: nginx-ssl
        secret:
          secretName: erp-ssl-certs
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - erp-app
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "app-tier"
        operator: "Equal"
        value: "application"
        effect: "NoSchedule"

---
# Green Deployment (for Blue-Green deployment)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: erp-app-green
  namespace: erp-sistema
  labels:
    app: erp-app
    version: green
    tier: application
spec:
  replicas: 0  # Initially scaled to 0
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: erp-app
      version: green
  template:
    metadata:
      labels:
        app: erp-app
        version: green
        tier: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      # Same spec as blue deployment
      serviceAccountName: erp-app-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
      containers:
      - name: erp-app
        image: ghcr.io/your-org/erp-sistema:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 9000
        - containerPort: 80
        - containerPort: 9090
        envFrom:
        - configMapRef:
            name: erp-app-config
        - secretRef:
            name: erp-app-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        volumeMounts:
        - name: storage-volume
          mountPath: /var/www/html/storage
      volumes:
      - name: storage-volume
        persistentVolumeClaim:
          claimName: erp-storage-pvc

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: erp-app-sa
  namespace: erp-sistema
  labels:
    app: erp-app

---
# Cluster Role for application
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: erp-app-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps"]
  verbs: ["get", "list", "watch"]

---
# Cluster Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: erp-app-binding
subjects:
- kind: ServiceAccount
  name: erp-app-sa
  namespace: erp-sistema
roleRef:
  kind: ClusterRole
  name: erp-app-role
  apiGroup: rbac.authorization.k8s.io

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: erp-app-service
  namespace: erp-sistema
  labels:
    app: erp-app
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: erp-app
    version: blue  # Initially points to blue
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 443
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800

---
# Blue Service (for Blue-Green deployment)
apiVersion: v1
kind: Service
metadata:
  name: erp-app-blue-service
  namespace: erp-sistema
  labels:
    app: erp-app
    version: blue
spec:
  selector:
    app: erp-app
    version: blue
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443

---
# Green Service (for Blue-Green deployment)
apiVersion: v1
kind: Service
metadata:
  name: erp-app-green-service
  namespace: erp-sistema
  labels:
    app: erp-app
    version: green
spec:
  selector:
    app: erp-app
    version: green
  ports:
  - name: http
    port: 80
    targetPort: 80
  - name: https
    port: 443
    targetPort: 443

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: erp-app-hpa
  namespace: erp-sistema
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: erp-app-blue
  minReplicas: 3
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: php_fpm_active_processes
      target:
        type: AverageValue
        averageValue: "30"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: erp-app-pdb
  namespace: erp-sistema
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: erp-app

---
# Persistent Volume for storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: erp-storage-pv
  labels:
    app: erp-app
spec:
  capacity:
    storage: 100Gi
  accessModes:
  - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: aws-efs
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-12345678

---
# Persistent Volume Claim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: erp-storage-pvc
  namespace: erp-sistema
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: aws-efs

---
# Network Policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: erp-app-network-policy
  namespace: erp-sistema
spec:
  podSelector:
    matchLabels:
      app: erp-app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  - from:
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mysql
    ports:
    - protocol: TCP
      port: 3306
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: erp-app-ingress
  namespace: erp-sistema
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains";
spec:
  tls:
  - hosts:
    - erp-sistema.com
    - www.erp-sistema.com
    secretName: erp-app-tls
  rules:
  - host: erp-sistema.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: erp-app-service
            port:
              number: 80
  - host: www.erp-sistema.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: erp-app-service
            port:
              number: 80