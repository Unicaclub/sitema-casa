openapi: 3.0.3
info:
  title: Sistema ERP - API REST
  description: |
    API completa para Sistema ERP empresarial com funcionalidades de CRM, Estoque, PDV, Financeiro e BI.
    
    ## Autenticação
    Utilize Bearer Token (JWT) no header Authorization para todas as requisições protegidas.
    
    ## Rate Limiting
    - 100 requisições por 5 minutos por IP
    - Headers de resposta incluem limites atuais
    
    ## Versionamento
    A API utiliza versionamento através da URL (v1, v2, etc.)
  version: 1.0.0
  contact:
    name: ERP Team
    email: dev@empresa.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.erp-sistema.com/api/v1
    description: Servidor de Produção
  - url: https://staging-api.erp-sistema.com/api/v1
    description: Servidor de Homologação
  - url: http://localhost:8000/api/v1
    description: Desenvolvimento Local

security:
  - bearerAuth: []

paths:
  # Autenticação
  /auth/login:
    post:
      tags: [Autenticação]
      summary: Realizar login
      description: Autentica usuário e retorna token JWT
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                  example: usuario@empresa.com
                password:
                  type: string
                  format: password
                  example: senha123
                two_factor_code:
                  type: string
                  example: "123456"
                  description: Código 2FA (obrigatório se ativado)
      responses:
        '200':
          description: Login realizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/refresh:
    post:
      tags: [Autenticação]
      summary: Renovar token
      description: Renova token JWT usando refresh token
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token renovado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags: [Autenticação]
      summary: Realizar logout
      description: Invalida token JWT atual
      responses:
        '204':
          description: Logout realizado com sucesso
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Dashboard
  /dashboard/metrics:
    get:
      tags: [Dashboard]
      summary: Obter métricas principais
      description: Retorna métricas consolidadas do dashboard
      parameters:
        - name: period
          in: query
          description: Período em dias para cálculo das métricas
          schema:
            type: integer
            default: 30
            minimum: 1
            maximum: 365
      responses:
        '200':
          description: Métricas obtidas com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardMetrics'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /dashboard/sales-chart:
    get:
      tags: [Dashboard]
      summary: Gráfico de vendas
      description: Dados para gráfico de vendas no período
      parameters:
        - name: type
          in: query
          description: Tipo de agrupamento
          schema:
            type: string
            enum: [daily, weekly, monthly]
            default: monthly
        - name: period
          in: query
          description: Número de períodos
          schema:
            type: integer
            default: 12
            minimum: 1
            maximum: 365
      responses:
        '200':
          description: Dados do gráfico obtidos com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesChart'

  /dashboard/top-products:
    get:
      tags: [Dashboard]
      summary: Top produtos mais vendidos
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 50
        - name: period
          in: query
          schema:
            type: integer
            default: 30
      responses:
        '200':
          description: Top produtos obtidos com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TopProduct'

  # CRM - Clientes
  /crm/clients:
    get:
      tags: [CRM]
      summary: Listar clientes
      description: Lista clientes com filtros e paginação
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: search
          in: query
          description: Buscar por nome, email ou documento
          schema:
            type: string
        - name: status
          in: query
          description: Filtrar por status
          schema:
            type: string
            enum: [active, inactive, blocked]
        - name: created_from
          in: query
          schema:
            type: string
            format: date
        - name: created_to
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Lista de clientes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientList'

    post:
      tags: [CRM]
      summary: Criar cliente
      description: Cria um novo cliente
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientCreate'
      responses:
        '201':
          description: Cliente criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '422':
          $ref: '#/components/responses/ValidationError'

  /crm/clients/{id}:
    get:
      tags: [CRM]
      summary: Obter cliente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Cliente obtido com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [CRM]
      summary: Atualizar cliente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientUpdate'
      responses:
        '200':
          description: Cliente atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags: [CRM]
      summary: Excluir cliente
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Cliente excluído com sucesso
        '404':
          $ref: '#/components/responses/NotFound'

  # Estoque - Produtos
  /stock/products:
    get:
      tags: [Estoque]
      summary: Listar produtos
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: search
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
        - name: low_stock
          in: query
          schema:
            type: boolean
        - name: out_of_stock
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Lista de produtos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductList'

    post:
      tags: [Estoque]
      summary: Criar produto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Produto criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'

  /stock/movements:
    post:
      tags: [Estoque]
      summary: Registrar movimentação
      description: Registra entrada ou saída de estoque
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockMovement'
      responses:
        '201':
          description: Movimentação registrada com sucesso

  # PDV - Vendas
  /pos/sales:
    get:
      tags: [PDV]
      summary: Listar vendas
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: date_from
          in: query
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          schema:
            type: string
            format: date
        - name: status
          in: query
          schema:
            type: string
            enum: [completed, cancelled, pending]
      responses:
        '200':
          description: Lista de vendas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleList'

    post:
      tags: [PDV]
      summary: Criar venda
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaleCreate'
      responses:
        '201':
          description: Venda criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SaleResponse'

  /pos/sales/{id}/cancel:
    post:
      tags: [PDV]
      summary: Cancelar venda
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  example: "Produto com defeito"
                refund_payment:
                  type: boolean
                  default: true
      responses:
        '200':
          description: Venda cancelada com sucesso

  # Financeiro
  /financial/receivables:
    get:
      tags: [Financeiro]
      summary: Listar contas a receber
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Limit'
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, paid, partial, overdue, cancelled]
        - name: due_date_from
          in: query
          schema:
            type: string
            format: date
        - name: due_date_to
          in: query
          schema:
            type: string
            format: date
        - name: client_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Lista de contas a receber
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceivableList'

    post:
      tags: [Financeiro]
      summary: Criar conta a receber
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReceivableCreate'
      responses:
        '201':
          description: Conta a receber criada com sucesso

  /financial/receivables/{id}/payments:
    post:
      tags: [Financeiro]
      summary: Registrar pagamento
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreate'
      responses:
        '201':
          description: Pagamento registrado com sucesso

  # Sistema
  /system/upload:
    post:
      tags: [Sistema]
      summary: Upload de arquivo
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                type:
                  type: string
                  enum: [product_image, company_logo, document]
                reference_id:
                  type: integer
      responses:
        '201':
          description: Arquivo enviado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                      filename:
                        type: string
                      size:
                        type: integer

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    Page:
      name: page
      in: query
      description: Número da página
      schema:
        type: integer
        default: 1
        minimum: 1
    
    Limit:
      name: limit
      in: query
      description: Itens por página
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100

  schemas:
    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Login realizado com sucesso"
        data:
          type: object
          properties:
            token:
              type: string
              example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            refresh_token:
              type: string
              example: "def502004f8a5c..."
            expires_in:
              type: integer
              example: 3600
            user:
              $ref: '#/components/schemas/User'

    TokenResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            token:
              type: string
            expires_in:
              type: integer

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "João Silva"
        email:
          type: string
          format: email
          example: "usuario@empresa.com"
        company:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
        permissions:
          type: array
          items:
            type: string
          example: ["dashboard.view", "sales.create"]

    DashboardMetrics:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            sales:
              type: object
              properties:
                total:
                  type: integer
                  example: 156
                revenue:
                  type: number
                  format: float
                  example: 87500.00
                avg_ticket:
                  type: number
                  format: float
                  example: 560.90
                today_sales:
                  type: integer
                  example: 8
                today_revenue:
                  type: number
                  format: float
                  example: 4200.00
            clients:
              type: object
              properties:
                total:
                  type: integer
                  example: 340
                new:
                  type: integer
                  example: 12
            stock:
              type: object
              properties:
                products_out_stock:
                  type: integer
                  example: 3
            financial:
              type: object
              properties:
                overdue_count:
                  type: integer
                  example: 5
                overdue_amount:
                  type: number
                  format: float
                  example: 2500.00
                income:
                  type: number
                  format: float
                  example: 85000.00
                expense:
                  type: number
                  format: float
                  example: 45000.00
                balance:
                  type: number
                  format: float
                  example: 40000.00

    SalesChart:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            labels:
              type: array
              items:
                type: string
              example: ["2025-01", "2025-02", "2025-03"]
            datasets:
              type: array
              items:
                type: object
                properties:
                  label:
                    type: string
                  data:
                    type: array
                    items:
                      type: number
                  backgroundColor:
                    type: string
                  borderColor:
                    type: string
                  yAxisID:
                    type: string

    TopProduct:
      type: object
      properties:
        name:
          type: string
          example: "Produto A"
        sku:
          type: string
          example: "PROD-001"
        sale_price:
          type: number
          format: float
          example: 29.90
        total_quantity:
          type: integer
          example: 150
        total_revenue:
          type: number
          format: float
          example: 4485.00
        sales_count:
          type: integer
          example: 45

    Client:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "João Silva"
        email:
          type: string
          format: email
          example: "joao@email.com"
        phone:
          type: string
          example: "(11) 99999-9999"
        document:
          type: string
          example: "123.456.789-00"
        company_name:
          type: string
          example: "Silva & Cia"
        status:
          type: string
          enum: [active, inactive, blocked]
          example: "active"
        total_purchases:
          type: integer
          example: 15
        total_spent:
          type: number
          format: float
          example: 5400.00
        last_purchase:
          type: string
          format: date
          example: "2025-08-01"
        created_at:
          type: string
          format: date-time
          example: "2025-07-01T10:30:00Z"

    ClientList:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            clients:
              type: array
              items:
                $ref: '#/components/schemas/Client'
            pagination:
              $ref: '#/components/schemas/Pagination'

    ClientCreate:
      type: object
      required: [name, email]
      properties:
        name:
          type: string
          example: "Maria Santos"
        email:
          type: string
          format: email
          example: "maria@email.com"
        phone:
          type: string
          example: "(11) 88888-8888"
        document:
          type: string
          example: "987.654.321-00"
        company_name:
          type: string
          example: "Santos LTDA"
        address:
          type: object
          properties:
            street:
              type: string
              example: "Rua das Flores, 123"
            city:
              type: string
              example: "São Paulo"
            state:
              type: string
              example: "SP"
            zip_code:
              type: string
              example: "01234-567"
        notes:
          type: string
          example: "Cliente preferencial"

    ClientUpdate:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        document:
          type: string
        company_name:
          type: string
        address:
          type: object
        notes:
          type: string

    ClientResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/Client'

    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        sku:
          type: string
        description:
          type: string
        category:
          type: string
        purchase_price:
          type: number
          format: float
        sale_price:
          type: number
          format: float
        current_stock:
          type: integer
        min_stock:
          type: integer
        max_stock:
          type: integer
        status:
          type: string
          enum: [active, inactive]

    ProductList:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            products:
              type: array
              items:
                $ref: '#/components/schemas/Product'
            pagination:
              $ref: '#/components/schemas/Pagination'

    ProductCreate:
      type: object
      required: [name, sku, sale_price]
      properties:
        name:
          type: string
          example: "Smartphone XYZ"
        sku:
          type: string
          example: "SMART-001"
        description:
          type: string
          example: "Smartphone com 128GB"
        category_id:
          type: integer
          example: 5
        purchase_price:
          type: number
          format: float
          example: 800.00
        sale_price:
          type: number
          format: float
          example: 1200.00
        current_stock:
          type: integer
          example: 50
        min_stock:
          type: integer
          example: 10
        max_stock:
          type: integer
          example: 200
        weight:
          type: number
          format: float
          example: 0.180
        dimensions:
          type: string
          example: "15x7x0.8"
        barcode:
          type: string
          example: "1234567890123"
        supplier_id:
          type: integer
          example: 3
        images:
          type: array
          items:
            type: string
          example: ["image1.jpg", "image2.jpg"]

    ProductResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/Product'

    StockMovement:
      type: object
      required: [product_id, type, quantity, reason]
      properties:
        product_id:
          type: integer
          example: 1
        type:
          type: string
          enum: [in, out]
          example: "in"
        quantity:
          type: integer
          example: 20
        reason:
          type: string
          enum: [purchase, sale, adjustment, return]
          example: "purchase"
        reference_id:
          type: integer
          example: 123
          description: "ID da compra/venda relacionada"
        notes:
          type: string
          example: "Reposição de estoque"

    Sale:
      type: object
      properties:
        id:
          type: integer
        number:
          type: string
        client_id:
          type: integer
        total_amount:
          type: number
          format: float
        status:
          type: string
          enum: [completed, cancelled, pending]
        created_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/SaleItem'

    SaleItem:
      type: object
      properties:
        product_id:
          type: integer
        product_name:
          type: string
        quantity:
          type: integer
        unit_price:
          type: number
          format: float
        total_price:
          type: number
          format: float
        discount:
          type: number
          format: float

    SaleList:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            sales:
              type: array
              items:
                $ref: '#/components/schemas/Sale'
            pagination:
              $ref: '#/components/schemas/Pagination'

    SaleCreate:
      type: object
      required: [items, payment]
      properties:
        client_id:
          type: integer
          example: 1
        items:
          type: array
          items:
            type: object
            required: [product_id, quantity, unit_price]
            properties:
              product_id:
                type: integer
                example: 1
              quantity:
                type: integer
                example: 2
              unit_price:
                type: number
                format: float
                example: 50.00
              discount:
                type: number
                format: float
                example: 5.00
        payment:
          type: object
          required: [method, amount]
          properties:
            method:
              type: string
              enum: [cash, credit_card, debit_card, bank_transfer, pix]
              example: "credit_card"
            amount:
              type: number
              format: float
              example: 125.00
            installments:
              type: integer
              example: 1
        discount_type:
          type: string
          enum: [percentage, amount]
          example: "percentage"
        discount_value:
          type: number
          format: float
          example: 0
        notes:
          type: string
          example: "Venda balcão"

    SaleResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/Sale'

    Receivable:
      type: object
      properties:
        id:
          type: integer
        client_id:
          type: integer
        client_name:
          type: string
        description:
          type: string
        amount:
          type: number
          format: float
        paid_amount:
          type: number
          format: float
        due_date:
          type: string
          format: date
        status:
          type: string
          enum: [pending, paid, partial, overdue, cancelled]
        created_at:
          type: string
          format: date-time

    ReceivableList:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            receivables:
              type: array
              items:
                $ref: '#/components/schemas/Receivable'
            pagination:
              $ref: '#/components/schemas/Pagination'

    ReceivableCreate:
      type: object
      required: [client_id, description, amount, due_date]
      properties:
        client_id:
          type: integer
          example: 1
        description:
          type: string
          example: "Venda #123"
        amount:
          type: number
          format: float
          example: 1500.00
        due_date:
          type: string
          format: date
          example: "2025-09-01"
        installments:
          type: integer
          example: 3
          description: "Opcional, para parcelamento"
        payment_method:
          type: string
          example: "credit_card"
        category_id:
          type: integer
          example: 2
        reference_type:
          type: string
          example: "sale"
        reference_id:
          type: integer
          example: 123

    PaymentCreate:
      type: object
      required: [amount, payment_date, payment_method]
      properties:
        amount:
          type: number
          format: float
          example: 500.00
        payment_date:
          type: string
          format: date
          example: "2025-08-03"
        payment_method:
          type: string
          enum: [cash, credit_card, debit_card, bank_transfer, pix]
          example: "bank_transfer"
        notes:
          type: string
          example: "Pagamento parcial"
        bank_account_id:
          type: integer
          example: 1

    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 20
        total:
          type: integer
          example: 340
        last_page:
          type: integer
          example: 17
        has_next:
          type: boolean
          example: true
        has_prev:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "VALIDATION_ERROR"
            message:
              type: string
              example: "Os dados fornecidos são inválidos"
            details:
              type: object
              additionalProperties: true
              example:
                email: ["O campo email é obrigatório"]
                phone: ["O formato do telefone é inválido"]
        timestamp:
          type: string
          format: date-time
          example: "2025-08-03T14:30:00Z"

  responses:
    Unauthorized:
      description: Token inválido ou expirado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "UNAUTHORIZED"
              message: "Token inválido ou expirado"
            timestamp: "2025-08-03T14:30:00Z"

    NotFound:
      description: Recurso não encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error:
              code: "NOT_FOUND"
              message: "Recurso não encontrado"
            timestamp: "2025-08-03T14:30:00Z"

    ValidationError:
      description: Erro de validação dos dados
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

tags:
  - name: Autenticação
    description: Endpoints para login, logout e refresh token
  - name: Dashboard
    description: Métricas e dados consolidados do dashboard
  - name: CRM
    description: Gestão de clientes e relacionamento
  - name: Estoque
    description: Gestão de produtos e movimentação de estoque
  - name: PDV
    description: Ponto de venda e gestão de vendas
  - name: Financeiro
    description: Contas a pagar, receber e fluxo de caixa
  - name: Sistema
    description: Configurações e funcionalidades do sistema