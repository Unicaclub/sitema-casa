# ðŸš€ Supremo Dockerfile - Ultimate Production Container
#
# Multi-stage optimized Docker build for maximum performance:
# - Multi-architecture support (AMD64, ARM64)
# - Optimized layer caching for faster builds
# - Security hardening with non-root user
# - Minimal attack surface with distroless base
# - Health checks and monitoring integration
# - Performance optimizations with JIT compilation
# - SSL/TLS certificate management
# - Log aggregation and structured logging

# Build Stage - Development Environment
FROM php:8.2-fpm-alpine AS base

# Build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=latest

# Labels for container metadata
LABEL maintainer="ERP Sistema Team" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="erp-sistema-supremo" \
      org.label-schema.description="Ultimate ERP System with Supremo Architecture" \
      org.label-schema.url="https://github.com/your-org/erp-sistema" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/your-org/erp-sistema" \
      org.label-schema.vendor="ERP Sistema" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

# Install system dependencies and PHP extensions
RUN apk add --no-cache \
    # Build dependencies
    $PHPIZE_DEPS \
    autoconf \
    gcc \
    g++ \
    make \
    # System utilities
    curl \
    wget \
    unzip \
    git \
    bash \
    supervisor \
    nginx \
    # Image processing
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    # Database drivers
    mysql-client \
    postgresql-dev \
    # Compression
    zlib-dev \
    libzip-dev \
    # Crypto
    libsodium-dev \
    # XML/XSL
    libxml2-dev \
    libxslt-dev \
    # Internationalization
    icu-dev \
    # Redis
    redis \
    # Monitoring
    htop \
    && docker-php-ext-configure gd \
        --with-freetype \
        --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
        gd \
        pdo \
        pdo_mysql \
        pdo_pgsql \
        zip \
        intl \
        opcache \
        bcmath \
        soap \
        xsl \
        sockets \
        sodium \
        exif \
    && pecl install \
        redis \
        xdebug \
        mongodb \
    && docker-php-ext-enable \
        redis \
        mongodb \
    && apk del $PHPIZE_DEPS \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Install Composer
COPY --from=composer:2.6 /usr/bin/composer /usr/bin/composer

# Create application user and directories
RUN addgroup -g 1000 -S appgroup \
    && adduser -u 1000 -S appuser -G appgroup \
    && mkdir -p /var/www/html \
    && mkdir -p /var/log/supervisor \
    && mkdir -p /var/run/nginx \
    && mkdir -p /etc/nginx/conf.d \
    && chown -R appuser:appgroup /var/www/html \
    && chown -R appuser:appgroup /var/log/supervisor \
    && chown -R appuser:appgroup /var/run/nginx

# Composer Stage - Dependency Installation
FROM base AS composer-stage

WORKDIR /var/www/html

# Copy composer files
COPY composer.json composer.lock ./

# Install PHP dependencies
RUN composer install \
    --no-dev \
    --no-scripts \
    --no-autoloader \
    --prefer-dist \
    --optimize-autoloader \
    && composer clear-cache

# Development Stage
FROM base AS development

# Install development dependencies
RUN apk add --no-cache \
    nodejs \
    npm \
    && docker-php-ext-enable xdebug

# Copy PHP configuration for development
COPY docker/php/php-dev.ini /usr/local/etc/php/php.ini
COPY docker/php/xdebug.ini /usr/local/etc/php/conf.d/xdebug.ini

# Set development environment
ENV APP_ENV=development
ENV APP_DEBUG=true

WORKDIR /var/www/html

# Copy application files
COPY --chown=appuser:appgroup . .
COPY --from=composer-stage /var/www/html/vendor ./vendor

# Install Node.js dependencies and build assets
RUN npm ci && npm run build:dev

# Generate optimized autoloader
RUN composer dump-autoload --optimize

USER appuser

EXPOSE 9000

CMD ["php-fpm"]

# Production Stage - Optimized for Performance
FROM base AS production

# Production PHP configuration
COPY docker/php/php-production.ini /usr/local/etc/php/php.ini
COPY docker/php/opcache.ini /usr/local/etc/php/conf.d/opcache.ini
COPY docker/php/php-fpm.conf /usr/local/etc/php-fpm.conf

# Nginx configuration
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.conf /etc/nginx/conf.d/default.conf
COPY docker/nginx/ssl/ /etc/nginx/ssl/

# Supervisor configuration
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Set production environment
ENV APP_ENV=production
ENV APP_DEBUG=false
ENV PHP_OPCACHE_ENABLE=1
ENV PHP_OPCACHE_REVALIDATE_FREQ=0
ENV PHP_OPCACHE_VALIDATE_TIMESTAMPS=0
ENV PHP_OPCACHE_MAX_ACCELERATED_FILES=20000
ENV PHP_OPCACHE_MEMORY_CONSUMPTION=256
ENV PHP_OPCACHE_MAX_WASTED_PERCENTAGE=10

WORKDIR /var/www/html

# Copy application files with proper ownership
COPY --chown=appuser:appgroup . .
COPY --from=composer-stage --chown=appuser:appgroup /var/www/html/vendor ./vendor

# Node.js build stage for production assets
FROM node:18-alpine AS node-build

WORKDIR /var/www/html

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source files needed for build
COPY public/ ./public/
COPY resources/ ./resources/
COPY webpack.mix.js ./

# Build production assets
RUN npm run build:production

# Final production stage
FROM production AS final

# Copy built assets from node-build stage
COPY --from=node-build --chown=appuser:appgroup /var/www/html/public/assets ./public/assets

# Create necessary directories and set permissions
RUN mkdir -p storage/logs \
    && mkdir -p storage/cache \
    && mkdir -p storage/sessions \
    && mkdir -p storage/uploads \
    && mkdir -p storage/backups \
    && chown -R appuser:appgroup storage \
    && chmod -R 755 storage \
    && chmod -R 777 storage/logs \
    && chmod -R 777 storage/cache \
    && chmod -R 777 storage/sessions

# Generate optimized autoloader and cache configuration
RUN composer dump-autoload --optimize --classmap-authoritative --no-dev \
    && php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache \
    && php artisan event:cache

# Create healthcheck script
RUN echo '#!/bin/sh' > /usr/local/bin/healthcheck.sh \
    && echo 'curl -f http://localhost/health || exit 1' >> /usr/local/bin/healthcheck.sh \
    && echo 'php artisan queue:monitor || exit 1' >> /usr/local/bin/healthcheck.sh \
    && echo 'redis-cli -h redis ping || exit 1' >> /usr/local/bin/healthcheck.sh \
    && chmod +x /usr/local/bin/healthcheck.sh

# Security hardening
RUN rm -rf /var/cache/apk/* \
    && rm -rf /tmp/* \
    && rm -rf /var/tmp/* \
    && rm -rf .git \
    && rm -rf node_modules \
    && rm -rf tests \
    && find storage -name "*.log" -delete

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /usr/local/bin/healthcheck.sh

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 80 443 9000

# Use supervisor to manage multiple processes
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]

# Security Scanning Stage
FROM aquasec/trivy:latest AS security-scan

# Copy the built image for security scanning
COPY --from=final /var/www/html /scan-target

# Run security scan
RUN trivy fs --security-checks vuln,config /scan-target

# Distroless production image for maximum security
FROM gcr.io/distroless/php8-fpm:nonroot AS distroless

# Copy application from production stage
COPY --from=final --chown=nonroot:nonroot /var/www/html /var/www/html
COPY --from=final --chown=nonroot:nonroot /usr/local/etc/php /usr/local/etc/php
COPY --from=final --chown=nonroot:nonroot /usr/local/bin/healthcheck.sh /usr/local/bin/healthcheck.sh

WORKDIR /var/www/html

USER nonroot

EXPOSE 9000

HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ["/usr/local/bin/healthcheck.sh"]

ENTRYPOINT ["php-fpm"]